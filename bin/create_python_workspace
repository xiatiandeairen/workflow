#!/usr/bin/env zsh

# 检查必要的命令是否存在
check_dependencies() {
    local deps=(pyenv pipx direnv)
    for dep in $deps; do
        if ! command -v $dep &> /dev/null; then
            echo "错误: 未找到命令 '$dep'. 请先安装该依赖."
            exit 1
        fi
    done
}

# 设置Python环境
setup_python() {
    local python_version="$1"
    
    # 检查是否已安装指定版本的Python
    if ! pyenv versions | grep -q "$python_version"; then
        echo "正在安装 Python $python_version..."
        pyenv install "$python_version" || {
            echo "错误: 无法安装 Python $python_version"
            exit 1
        }
    fi
    
    # 设置本地Python版本
    pyenv local "$python_version" || {
        echo "错误: 无法设置 Python 版本为 $python_version"
        exit 1
    }
}

# 创建并激活虚拟环境
setup_virtualenv() {
    local python_version="$1"
    
    # 使用pipx创建虚拟环境
    pipx run virtualenv venv --python="$(pyenv prefix $python_version)/bin/python" || {
        echo "错误: 无法创建虚拟环境"
        exit 1
    }
}

# 配置direnv
setup_direnv() {
    # 创建.envrc文件
    cat > .envrc << EOL
source venv/bin/activate
export PYTHONPATH=\$PWD:\$PYTHONPATH
EOL
    
    # 允许direnv使用这个配置
    direnv allow .
}

main() {
    # 设置默认值
    local python_version="${1:-3.9.0}"  # 默认为3.9.0
    
    # 检查依赖
    check_dependencies
    
    # 执行设置步骤
    echo "正在设置Python工作空间..."
    setup_python "$python_version"
    setup_virtualenv "$python_version"
    setup_direnv
    
    echo "Python工作空间设置完成！"
    echo "Python版本: $python_version"
    echo "虚拟环境: venv"
    echo "提示: 请重新打开终端或执行 'direnv allow' 以激活环境"
}

# 执行主函数
main "$@"
